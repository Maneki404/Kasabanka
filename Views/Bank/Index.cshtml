
@{
    ViewBag.Title = "Banka";
}

@model List<Kasabanka.Models.BankItem>

<style>
    /* Ensure all columns are left-aligned */
    #bankTable th,
    #bankTable td {
        text-align: left;
    }
</style>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="mb-0">Bankalar</h2>
    <button class="btn btn-primary" type="button" title="Yeni banka eklemek için tıklayınız." onclick="OpenAddBankModal()">Yeni Banka Oluştur</button>
</div>

<table id="bankTable" class="table table-striped table-bordered display">
    <thead>
        <tr>
            <th>Banka Kodu</th>
            <th>Banka Adı</th>
            <th>TL (₺)</th>
            <th>USD ($)</th>
            <th>EUR (€)</th>
            <th>GBP (£)</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<div id="addBankModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Yeni Banka Oluştur</h4>
            </div>
            <form id="addBankForm">
                <div class="modal-body">
                    <input type="hidden" id="bankIdInput" />
                    <label>Banka Kodu</label>
                    <input class="form-control mb-2" name="bankCodeInput" id="bankCodeInput" placeholder="Banka kodunu giriniz" required />
                    <label>Banka Adı</label>
                    <input class="form-control mb-2" id="bankNameInput" placeholder="Banka adını giriniz" required />
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Kaydet</button>
                    <button type="button" class="btn btn-default" onclick="CloseAddModal()">Vazgeç</button>
                </div>
            </form>

        </div>

    </div>
</div>

<div id="updateBankModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Banka Güncelleme</h4>
            </div>
            <form id="updateBankForm">
                <div class="modal-body">
                    <input type="hidden" id="bankIdUpdateInput" />
                    <label>Banka Kodu</label>
                    <input class="form-control mb-2" name="bankCodeUpdateInput" id="bankCodeUpdateInput" placeholder="Banka kodunu giriniz" required />
                    <label>Banka Adı</label>
                    <input class="form-control mb-2" id="bankNameUpdateInput" placeholder="Banka adını giriniz" required />
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Kaydet</button>
                    <button type="button" class="btn btn-default" onclick="CloseUpdateModal()">Vazgeç</button>
                </div>
            </form>

        </div>

    </div>
</div>

<div id="deleteBankModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Banka Silinecektir Onaylıyor Musunuz?</h4>
            </div>
            <form id="deleteBankForm">
                <div class="modal-body">
                    <input type="hidden" id="bankIdDeleteInput" />
                    <button type="submit" class="btn btn-danger">Evet</button>
                    <button type="button" class="btn btn-outline-dark" onclick="CloseDeleteModal()">Hayır</button>
                </div>
            </form>

        </div>

    </div>
</div>

@section scripts {
    <script>
        var table;

        $(function () {
            InitializeTable();
        });

        function GetAmounts(currency, bankId, callback) {
            console.warn("Currency", currency);
            console.warn("BankId", typeof (bankId));
            $.ajax({
                type: "GET",
                url: "/Transactions/GetAmountsByCurrency",
                data: { currency: currency, bankId: bankId, isBank: true },
                success: function (data) {
                    var totalAmount = 0;

                    $.each(data.data, function (index, amount) {
                        totalAmount += amount;
                    });
                    console.warn("Total:" + totalAmount);
                    console.warn("FormattedAmount:" + totalAmount);

                    totalAmount = totalAmount.toFixed(2) + " " + currencySymbol(currency);

                    callback(totalAmount);
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching transactions.");
                    console.error("Response:", xhr.responseText);
                    callback("0.00 " + currencySymbol(currency)); // Default to zero in case of an error
                }
            });
        }

        function currencySymbol(currency) {
            switch (currency) {
                case "TL": return "₺";
                case "USD": return "$";
                case "EUR": return "€";
                case "GBP": return "£";
                default: return "";
            }
        }

        function InitializeTable() {
            table = new DataTable('#bankTable', {
                ajax: {
                    url: '/Bank/GetBanks',
                    dataSrc: function (json) {
                        setTimeout(() => {
                            table.rows().every(function () {
                                var row = this;
                                var bankId = row.data().Id;
                                UpdateCurrencyColumns(row, bankId);
                            });
                        }, 1000);
                        return json.data;
                    }
                },
                language: {
                    url: '//cdn.datatables.net/plug-ins/2.2.2/i18n/tr.json',
                },

                columns: [
                    { data: 'Code' },
                    { data: 'Name' },
                    { data: null, defaultContent: "Loading...", className: "tl-amount" },
                    { data: null, defaultContent: "Loading...", className: "usd-amount" },
                    { data: null, defaultContent: "Loading...", className: "eur-amount" },
                    { data: null, defaultContent: "Loading...", className: "gbp-amount" },
                    {
                        data: null,
                        render: function (data, type, row) {
                            var deletebutton = `<button type="button" title="Bankayı silmek için tıkla." onclick="OpenDeleteBankModal(${row.Id})" class="m-1 btn btn-sm btn-danger">Sil</button>`;
                            var updatebutton = `<button type="button" title="Bankayı düzenlemek için tıkla." onclick="OpenUpdateBankModal(${row.Id})" class="m-1 btn btn-sm btn-info">Düzenle</button>`;
                            return updatebutton + deletebutton;
                        }
                    },
                ]
            });
        }

        function UpdateCurrencyColumns(row, bankId) {
            if (!row) {
                console.warn("Row not found for bankId:", bankId);
                return;
            }

            var rowNode = $(row.node());

            GetAmounts("TL", bankId, function (amount) {
                rowNode.find(".tl-amount").html(amount);
            });
            GetAmounts("USD", bankId, function (amount) {
                rowNode.find(".usd-amount").html(amount);
            });
            GetAmounts("EUR", bankId, function (amount) {
                rowNode.find(".eur-amount").html(amount);
            });
            GetAmounts("GBP", bankId, function (amount) {
                rowNode.find(".gbp-amount").html(amount);
            });
        }

        function OpenAddBankModal() {
            $("#bankNameInput").val("");
            $("#bankCodeInput").val("");
            $("#addBankModal").modal("show");
        }

        function CloseAddModal() {
            $("#addBankModal").modal("hide");
        }

        $("#addBankForm").on("submit", function (event) {
            event.preventDefault();
            SaveNewBank();
        });

        function SaveNewBank() {
            var object = {
                Name: $("#bankNameInput").val(),
                Code: $("#bankCodeInput").val(),
            }

            $.ajax({
                type: "POST",
                url: "/Bank/CreateBank",
                data: object,
                success: function (data) {
                    CloseAddModal();
                    if (data.Success) {
                        Swal.fire({
                            title: "Başarılı!",
                            text: data.Message,
                            icon: "success"
                        }).then((result) => {
                            table.ajax.reload();
                        });
                    }
                    else {
                        Swal.fire({
                            title: "Uyarı!",
                            text: data.Message,
                            icon: "warning"
                        });
                    }
                },
                error: function () {
                    CloseAddModal();
                    Swal.fire({
                        title: "Hata!",
                        text: "Beklenmeyen bir hata oluştu.",
                        icon: "error"
                    });
                }
            });
        }

        function OpenUpdateBankModal(id) {
            $.ajax({
                type: "GET",
                url: "/Bank/GetBankById",
                data: { id: id },
                success: function (data) {
                    if (data) {
                        $("#bankIdUpdateInput").val(data.Id);
                        $("#bankNameUpdateInput").val(data.Name);
                        $("#bankCodeUpdateInput").val(data.Code);
                        $("#updateBankModal").modal("show");
                    } else {
                        Swal.fire({
                            title: "Hata!",
                            text: "Banka bilgisi alınamadı.",
                            icon: "error"
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: "Hata!",
                        text: "Beklenmeyen bir hata oluştu.",
                        icon: "error"
                    });
                }
            });
        }

        function CloseUpdateModal() {
            $("#updateBankModal").modal("hide");
        }

        $("#updateBankForm").on("submit", function (event) {
            event.preventDefault();
            UpdateBank();
        });

        function UpdateBank() {
            var object = {
                Id: $("#bankIdUpdateInput").val(),
                Name: $("#bankNameUpdateInput").val(),
                Code: $("#bankCodeUpdateInput").val(),
            }

            $.ajax({
                type: "POST",
                url: "/Bank/UpdateBank",
                data: object,
                success: function (data) {
                    CloseUpdateModal();
                    if (data.Success) {
                        Swal.fire({
                            title: "Başarılı!",
                            text: data.Message,
                            icon: "success"
                        }).then((result) => {
                            table.ajax.reload();
                        });
                    }
                    else {
                        Swal.fire({
                            title: "Uyarı!",
                            text: data.Message,
                            icon: "warning"
                        });
                    }
                },
                error: function () {
                    CloseUpdateModal();
                    Swal.fire({
                        title: "Hata!",
                        text: "Beklenmeyen bir hata oluştu.",
                        icon: "error"
                    });
                }
            });
        }

        function OpenDeleteBankModal(id) {
            $.ajax({
                type: "GET",
                url: "/Bank/GetBankById",
                data: { id: id },
                success: function (data) {
                    if (data) {
                        $("#bankIdDeleteInput").val(data.Id);
                        console.log($("#bankIdDeleteInput").val());
                        $("#deleteBankModal").modal("show");
                    } else {
                        Swal.fire({
                            title: "Hata!",
                            text: "Banka bilgisi alınamadı.",
                            icon: "error"
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: "Hata!",
                        text: "Beklenmeyen bir hata oluştu.",
                        icon: "error"
                    });
                }
            });
        }

        function CloseDeleteModal() {
            $("#deleteBankModal").modal("hide");
        }

        $("#deleteBankForm").on("submit", function (event) {
            event.preventDefault();
            DeleteBank($("#bankIdDeleteInput").val());
        });

        function DeleteBank(id) {
            $.ajax({
                type: "POST",
                url: "/Bank/DeleteBank",
                data: { id: id },
                success: function (data) {
                    CloseDeleteModal();
                    if (data.Success) {
                        Swal.fire({
                            title: "Başarılı!",
                            text: data.Message,
                            icon: "success"
                        }).then((result) => {
                            table.ajax.reload();
                        });
                    }
                    else {
                        Swal.fire({
                            title: "Uyarı!",
                            text: data.Message,
                            icon: "warning"
                        });
                    }
                },
                error: function () {
                    CloseDeleteModal();
                    Swal.fire({
                        title: "Hata!",
                        text: "Beklenmeyen bir hata oluştu.",
                        icon: "error"
                    });
                }
            });
        }


    </script>
}