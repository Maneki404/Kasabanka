
@{
    ViewBag.Title = "İşlemler";
}

@model List<Kasabanka.Models.Transaction>

<style>
    /* Ensure all columns are left-aligned */
    #transactionTable th,
    #transactionTable td {
        text-align: left;
    }
</style>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="mb-0">İşlemler</h2>
    <button class="btn btn-primary" type="button" title="Yeni işlem eklemek için tıklayınız." onclick="OpenAddModal()">Yeni İşlem Oluştur</button>
</div>

<table id="transactionTable" class="table table-striped table-bordered display">
    <thead>
        <tr>
            <th>İşlem Türü</th>
            <th>İşlem No</th>
            <th>Açıklama</th>
            <th>Para Birimi</th>
            <th>Para Miktarı</th>
            <th>Banka / Kasa</th>
            <th>İşlem Tarihi</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<div id="addTransactionModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Yeni İşlem Oluştur</h4>
            </div>
            <form id="addTransactionForm">
                <div class="modal-body">
                    <label>İşlem Türü</label>
                    <select id="transactionTypeDropdown" class="form-control mb-2" required>
                        <option value="">Seçiniz</option>
                        <option value="Gelen Havale">Gelen Havale</option>
                        <option value="Giden Havale">Giden Havale</option>
                        <option value="Nakit Tahsilat">Nakit Tahsilat</option>
                        <option value="Nakit Ödeme">Nakit Ödeme</option>
                    </select>
                    <label>İşlem Numarası</label>
                    <input class="form-control mb-2" name="transactionNoInput" id="transactionNoInput" placeholder="İşlem numarasını giriniz" required />
                    <label>Açıklama</label>
                    <input class="form-control mb-2" name="transactionDescriptionInput" id="transactionDescriptionInput" placeholder="Açıklama giriniz" required />
                    <label>Para Birimi</label>
                    <select id="transactionCurrencyDropdown" class="form-control mb-2" required>
                        <option value="">Seçiniz</option>
                        <option value="TL">TL (₺)</option>
                        <option value="USD">USD ($)</option>
                        <option value="EUR">EUR (€)</option>
                        <option value="GBP">GBP (£)</option>
                    </select>
                    <label>Para Miktarı</label>
                    <input class="form-control mb-2" name="transactionAmountInput" id="transactionAmountInput" placeholder="Para miktarını giriniz" required type="number" />
                    <label id="bankOrSafeLabel" style="display: none;">Banka veya Kasa</label>
                    <select id="transactionSafeOrBankDropdown" style="display: none;" class="form-control mb-2" required>
                        <option value="">Seçiniz</option>
                        <option value="Banka">Banka</option>
                        <option value="Kasa">Kasa</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Kaydet</button>
                    <button type="button" class="btn btn-default" onclick="CloseAddModal()">Vazgeç</button>
                </div>
            </form>

        </div>

    </div>
</div>


@section scripts {
    <script>
        var table;

        $(function () {
            InitializeTable();
        });

        function formatJsonDate(jsonDate) {
            var date = new Date(Number(jsonDate.match(/\d+/)[0]));
            // Format the date to a human-readable format
            const options = {
                day: '2-digit',
                month: 'long',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                hour12: false // Use 24-hour format
            };

            return date.toLocaleString('tr-TR', options); // Turkish locale
        }


        function InitializeTable() {
            table = new DataTable('#transactionTable', {
                ajax: {
                    url: '/Transactions/GetTransactions',
                },
                language: {
                    url: '//cdn.datatables.net/plug-ins/2.2.2/i18n/tr.json',
                },

                columns: [
                    { data: 'Type' },
                    { data: 'No' },
                    { data: 'Description' },
                    { data: 'Currency' },
                    {
                        data: 'Amount',
                        render: function (data) {
                            return data ? data.replace(",", ".")
                                : "-";
                        }
                    },
                    { data: 'SafeOrBank' },
                    {
                        data: 'Date',
                        render: function (data, type, row) {
                            return formatJsonDate(data);
                        }
                    },
                ]
            });
        }


        $("#transactionTypeDropdown").change(function () {
            var selectedType = $(this).val();
            var safeOrBankDropdown = $("#transactionSafeOrBankDropdown");
            var bankOrSafeLabel = $("#bankOrSafeLabel");


            safeOrBankDropdown.empty();


            if (selectedType === "Gelen Havale" || selectedType === "Giden Havale") {
                bankOrSafeLabel.text("Banka Seçiniz").show(); // Show label
                populateBankDropdown();
            } else if (selectedType === "Nakit Tahsilat" || selectedType === "Nakit Ödeme") {
                bankOrSafeLabel.text("Kasa Seçiniz").show(); // Show label
                populateSafeDropdown();
            } else {
                bankOrSafeLabel.hide();
                safeOrBankDropdown.hide();
            }
            safeOrBankDropdown.prepend('<option value="">Seçiniz</option>');
        });


        function populateBankDropdown() {
            $.ajax({
                type: "GET",
                url: "/Bank/GetBanks",
                success: function (data) {
                    var safeOrBankDropdown = $("#transactionSafeOrBankDropdown");
                    safeOrBankDropdown.empty();
                    safeOrBankDropdown.append('<option value="">Seçiniz</option>');


                    $.each(data.data, function (index, bank) {
                        safeOrBankDropdown.append('<option value="' + bank.Code + ' - ' + bank.Name + '">' + bank.Code + " - " + bank.Name + '</option>');
                    });

                    safeOrBankDropdown.show();
                },
                error: function () {
                    console.error("Error fetching banks");
                }
            });
        }

        function populateSafeDropdown() {
            $.ajax({
                type: "GET",
                url: "/Safe/GetSafes",
                success: function (data) {
                    var safeOrBankDropdown = $("#transactionSafeOrBankDropdown");
                    safeOrBankDropdown.empty();
                    safeOrBankDropdown.append('<option value="">Seçiniz</option>');

                    $.each(data.data, function (index, safe) {
                        safeOrBankDropdown.append('<option value="' + safe.Code + ' - ' + safe.Name + '">' + safe.Code + " - " + safe.Name + '</option>');
                    });

                    safeOrBankDropdown.show();
                },
                error: function () {
                    console.error("Error fetching banks");
                }
            });
        }

        function OpenAddModal() {
            $("#transactionTypeDropdown").val("");
            $("#transactionNoInput").val("");
            $("#transactionDescriptionInput").val("");
            $("#transactionCurrencyDropdown").val("");
            $("#transactionAmountInput").val("");
            $("#transactionSafeOrBankDropdown").val("");
            $("#addTransactionModal").modal("show");
        }

        function CloseAddModal() {
            $("#addTransactionModal").modal("hide");
        }

        $("#addTransactionForm").on("submit", function (event) {
            event.preventDefault();
            SaveNewTransaction(transactionAmountInput);
        });

        $("#transactionAmountInput").change(function () {
            var amount = $(this).val();

            if (amount.includes(",")) {
                amount = amount.replace(",", ".");
            }
            var formattedAmount = parseFloat(amount);
            if (!isNaN(formattedAmount)) {
                $(this).val(formattedAmount.toFixed(2));
            }
        });


        function SaveNewTransaction() {
            var object = {
                Type: $("#transactionTypeDropdown").val(),
                No: $("#transactionNoInput").val(),
                Description: $("#transactionDescriptionInput").val(),
                Currency: $("#transactionCurrencyDropdown").val(),
                Amount: $("#transactionAmountInput").val(),
                SafeOrBank: $("#transactionSafeOrBankDropdown").val(),
                Date: new Date().toISOString()
            }

            console.warn(object);

            $.ajax({
                type: "POST",
                url: "/Transactions/CreateTransaction",
                data: object,
                success: function (data) {
                    CloseAddModal();
                    if (data.Success) {
                        Swal.fire({
                            title: "Başarılı!",
                            text: data.Message,
                            icon: "success"
                        }).then((result) => {
                            table.ajax.reload();
                        });
                    }
                    else {
                        Swal.fire({
                            title: "Uyarı!",
                            text: data.Message,
                            icon: "warning"
                        });
                    }
                },
                error: function () {
                    CloseAddModal();
                    Swal.fire({
                        title: "Hata!",
                        text: "Beklenmeyen bir hata oluştu.",
                        icon: "error"
                    });
                }
            });
        }
    </script>
}

